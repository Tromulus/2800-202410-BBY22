<!--tracking page with the specific order - niko -->
<!DOCTYPE html>
<html>
<head>
    <title>Tracking</title>
    <link rel="stylesheet" type="text/css" href="/css/style_tracking.css">
    <script>
    // variables for this script
    var map, directionsService, directionsRenderer, startMarker, endMarker;

    // function to initialize the map
        function initMap() {
            // destination coordinates from the order datbase
            var destination = { lat: <%= order.coordinates.latitude %>, lng: <%= order.coordinates.longitude %> };
            
            map = new google.maps.Map(document.getElementById('map'), {
                center: destination,
                zoom: 12
            });
            // render the route on the map
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({ suppressMarkers: true });
            directionsRenderer.setMap(map);

            fetchAndDrawRoute();

            // fetch and draw route every 2 minutes
            setInterval(fetchAndDrawRoute, 2 * 60 * 1000);
        }
        // function to fetch and draw the route
        function fetchAndDrawRoute() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var currentLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    drawRoute(currentLocation);
                    updateDeliveryStatus(currentLocation);
                }, function (error) {
                    console.error("Error fetching current position:", error);
                });
            } else {
                alert("Geolocation is not supported by this browser.");
            }
        }
        //  function to draw the route
        function drawRoute(currentLocation) {
            var destination = { lat: <%= order.coordinates.latitude %>, lng: <%= order.coordinates.longitude %> };

            //get the route from the current location to the destination
            var request = {
                origin: currentLocation,
                destination: destination,
                travelMode: 'DRIVING'
            };
            //  function to draw the route get reference from google map api
            directionsService.route(request, function (result, status) {
                if (status == 'OK') {
                    directionsRenderer.setDirections(result);

                    var route = result.routes[0].legs[0];

                    if (startMarker) {
                        startMarker.setMap(null);
                    }
                    startMarker = new google.maps.Marker({
                        position: route.start_location,
                        map: map,
                        icon: 'https://img.icons8.com/?size=30&id=1umf9H7eLhfs&format=png&color=000000' // custom icon change later
                    });

                    if (endMarker) {
                        endMarker.setMap(null);
                    }
                    endMarker = new google.maps.Marker({
                        position: route.end_location,
                        map: map,
                        icon: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png' // google maps icon
                    });
                } else {
                    console.error('Directions request failed due to ' + status);
                }
            });
        }
        // function to update the delivery status
        function updateDeliveryStatus(currentLocation) {
            var destination = { lat: <%= order.coordinates.latitude %>, lng: <%= order.coordinates.longitude %> };

            var distance = getDistance(currentLocation.lat, currentLocation.lng, destination.lat, destination.lng);

            var statusElement = document.getElementById("deliveryStatus");
            if (distance <= 100) { // under 100 meters will show the order as delivered
                statusElement.innerText = "Delivery Status: Delivered";
            } else {
                statusElement.innerText = "Delivery Status: In Transit";
            }
        }

        // calculate distance between two points
        function getDistance(lat1, lon1, lat2, lon2) {
            const R = 6371000; 
            const toRadians = degree => degree * Math.PI / 180;

            const lat1Rad = toRadians(lat1);
            const lat2Rad = toRadians(lat2);
            const deltaLat = toRadians(lat2 - lat1);
            const deltaLon = toRadians(lon1 - lon2);

            const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
                      Math.cos(lat1Rad) * Math.cos(lat2Rad) *
                      Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            const distance = R * c;
            return distance;
        }

        // loading Google Maps API
        function loadScript(src) {
            var script = document.createElement('script');
            script.src = src;
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        }

        loadScript(`https://maps.googleapis.com/maps/api/js?key=<%= google_maps_api_key %>&callback=initMap`);
    </script>
</head>
<body>
    <%- include("templates/header") %> 

    <div class="container">
        <div class="order-map-container">
            <div class="order-info">
                <h1>Order Number: <%= order.orderNumber %></h1>
                <p>Date: <%= new Date(order.date).toLocaleDateString() %></p>
                <p>Name: <%= order.username %></p>
                <p>Address: <%= order.address %></p>
                <p id="deliveryStatus"> Delivery Status: In Transit</p>
                <div class="cart-info">
                    <h2>Order Information</h2>
                    <% if (cart && cart.models) { %>
                        <table>
                            <thead>
                                <tr>
                                    <th>Model</th>
                                    <th>Name</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <!--get the data from the cart schema -->
                            <tbody>
                                <% for (let model in cart.models) { %>
                                    <tr>
                                        <td><img src="/img/robots/<%= cart.models[model].model %>.png" alt="<%= cart.models[model].model %>" class="robot-img"></td>
                                        <td><%= cart.models[model].model %></td>
                                        <td>$<%= cart.models[model].price %></td>
                                        <td><%= cart.models[model].qty %></td>
                                        <td>$<%= (cart.models[model].price * cart.models[model].qty).toFixed(2) %></td>
                                    </tr>
                                <% } %>
                                <tr>
                                    <td colspan="4" class="total-text">Total Price:</td>
                                    <td class="total-price">$<%= (cart.totalPrice + 4.99).toFixed(2) %></td>
                                </tr>
                            </tbody>
                        </table>
                        <!-- <p class="total">Total Quantity: <%= cart.totalQty %></p> -->
                    <% } else { %>
                        <p>Your cart is empty.</p>
                    <% } %>
                </div>
            </div>
            <div class="map-container">
                <div id="map"></div>
            </div>
        </div>
    </div>

    <%- include("templates/footer") %> 
</body>
</html>
